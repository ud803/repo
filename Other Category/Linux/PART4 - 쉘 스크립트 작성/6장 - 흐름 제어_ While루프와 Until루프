앞의 메뉴 선택 과정에서, 단 한 번의 메뉴 선택으로 프로그램이 종료되는 문제가 남아있다. 프로그램을 다시 구성하여 사용자가 프로그램을 종료할 때까지 메뉴를 계속적으로 선택할 수 있도록 반복되면 편리할 것이다.

이번 장에서는 루핑(looping)이라는 프로그래밍 개념에 대해 알아볼 것이다. 쉘은 루프를 위한 세 개의 합성 명령어들을 제공하는데, 일단 두 가지만 살펴보고 33장에서 나머지를 다루겠다.

1. 루프 돌기(반복)

  while commands; do commands; done

if와 유사하게, while은 명령어 목록의 종료 상태를 확인한다. 종료 상태가 0인 동안에는 루프 내에서 명령어를 실행한다.
  while [ $count -le 5 ]; do
      echo $count
      count=$((count + 1))
  done

  while [[ $REPLY != 0 ]]; do

  done


2. 루프 탈출
bash는 두 개의 내장 명령어를 제공하는데, 루프 내에서 프로그램의 흐름을 제어하기 위함이다.
break명령어는 즉각 루프를 중단하고, 루프 다음에 나오는 구문을 실행한다.
continue는 루프 안의 남은 내용을 건너뛰고 다시 루프의 처음부터 실행하도록 한다.




3. until
until명령어는 0이 아닌 종료 상태를 만났을 때 루프를 종료하는 대신에 계속 수행된다는 것만 제외하고 while과 동일하다 until 루프는 종료 상태 값으로 0을 받을 때까지 계속된다.
  쉽게 말하면,
  while은 조건에 대해 종료 상태가 0인 동안만 실행되고,
  until은 조건에 대해 종료 상태가 0이 될 때까지 실행된다.


4. 루프를 이용한 파일 읽기

while read distro version release; do
  printf "Distro: %s\tVersion: %s\tReleased: %s\n" \
         $distro \
         $version \
         $release
done < distros.txt

read명령은 파일 끝에 도달할 때까지 종료 상태 0을 가지고 실행되다가 파일의 모든 내용을 읽고 나면 종료된다.

이는 파이프라인과 함께 사용할 수도 있다!

* printf "%s" \name
  printf "%s %s" \name1 \name2
