프로그램들의 규모가 커지고 복잡해질수록 프로그램을 설계하고 코딩하고 유지보수하는 것도 점점 어려워진다. 이러한 대형 프로젝트를 진행할 때는 크고 복잡한 작업을 작고 간단한 단위로 나누는 것이 좋다.

최상위 단계들을 정의하고 이러한 단계들을 구체적으로 나누어가는 과정을 하향식 설계(top-down design)라고 한다. 이러한 설계 방법은 크고 복잡한 작업을 단순하고 작은 단위의 작업으로 세분화시킬 수 있다. 하향식 설계 방식은 프로그램을 설계하는 방법 중 가장 흔히 사용되고, 쉘 프로그래밍에 적합하기도 하다.

1. 쉘 함수
  우리가 작성 중인 스크립트는 다음과 같은 단계에 따라 HTML 문서를 생성한다.
    1 페이지 열기
    2 페이지 헤더 열기
    3 페이지 제목 정하기
    4 페이지 헤더 닫기
    5 페이지 본문 열기
    6 페이지 헤더 정보 출력하기
    7 날짜 및 시간 출력하기
    8 페이지 본문 닫기
    9 페이지 닫기

  다음 개발 단계로 진행하기 전에 7번째와 8번째 단계 사이에 몇 가지 작업을 추가할 것이다.
    -시스템 가동시간(uptime)과 부하량
      uptime은 가장 최근에 시스템이 종료되거나 재부팅된 이후부터의 가동시간을 의미
      부하량은 일정 시간마다 프로세서상에서 현재 실행 중인 작업의 평균 개수를 의미
    -디스크 사용 공간
      현재 사용중인 저장 장치의 사용 공간
    -홈 공간
      사용자별 저장 장치 사용 공간

      $(report_uptime)
      $(report_disk_space)
      $(report_home_space)

      이 명령어들을 사용하기 위한 두 가지 방법이 있다.
      1) 스크립트를 세 가지로 나눠 작성한 다음 PATH에 정의된 디렉토리에 저장한다
      2) 스크립트 자체를 쉘 함수로 정의하여 프로그램에 추가한다

  쉘 함수는 '미니 스크립트'이며 다음 둘 중 하나의 방법으로 정의된다.

      function name {
        commands
        return
      }

      name() {
        commands
        return
      }



2. 지역 변수
  지금까지 작성한 스크립트에서 모든 변수는 전역 변수로 선언되었다. 하지만 이는 가끔씩 쉘 함수 사용에 혼란을 가져오기도 한다. 쉘 함수 내부적으로 사용할 지역 변수가 종종 필요하게 된다. 지역 변수는 해당 변수가 정의된 쉘 함수 내에서만 유효하며 함수가 종료되는 순간 그 효과 또한 사라진다.

    funct1 () {
      local foo
      foo=1
    }

    지역 변수는 local이라는 단어를 변수명 앞에 선언함으로써 정의할 수 있다.



3. 스크립트 실행 상태 유지
프로그램을 개발하는 동안, 프로그램을 실행 가능한 상태로 유지할 수 있다면 좋을 것이다. 흔히 프로그래머들이 말하는 스텁(stubs)이라는 빈 함수를 프로그램에 추가하면, 초기 단계에서 프로그램의 논리적 흐름을 확인해볼 수 있다.

피드백을 볼 수 있는 내용을 함수에 추가할 수 있다.
report_uptime () {
  echo "Function report_uptime executed."
  return
}

report_uptime () {
        cat <<- _EOF_
                <H2>System Uptime</H2>
                <PRE>$(uptime)</PRE>
                _EOF_
        return
}

report_disk_space () {
        cat <<- _EOF_
                <H2>Disk Space Utilization</H2>
                <PRE>$(df -h)</PRE>
                _EOF_
        return
}

report_home_space () {
        cat <<- _EOF_
                <H2>Home Space utilization</H2>
                <PRE>$(du -sh /home/*)</PRE>
                _EOF_
        return
}

PRE태그는 그 형식을 유지해준다.
df -h 명령어는 디스크 사용 공간을 확인
du -sh 는 사용자 공간을 확인, but 접근성 이슈가 있다. 뒤에서 살펴볼 예정.
