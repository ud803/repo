우리가 만든 프로그램에서 한 가지 놓치고 있는 기능은 커맨드라인 옵션과 인자를 허용하고 처리하는 능력이다. 이 장에서는 커맨드라인의 내용에 접근하는 쉘 기능을 알아볼 것이다.


1. 커맨드라인 항목 접근
쉘은 위치 매개변수라는 변수의 집합을 제공한다. 그것은 커맨드라인 명령의 개별 요소들을 가지고 있으며 0부터 9까지 이름을 붙인다. 다음과 같은 방식으로 나타낼 수 있다.

    echo "
      \$0 = $0
      \$1 = $1
      ...
      ...
      \$9 = $9
    "

  여기서 $0은 실행되고 있는 프로그래의 "경로명"이고,
  1~9는 차례대로 각 매개변수를 의미한다. 9보다 큰 수는 ${110} 처럼 중괄호를 이용한다.


2. 인자 수 확인
쉘은 커맨드라인의 인자 수를 넘겨주는 변수 $#을 제공한다.

  posit-param a b c d
  를 실행했을 때,

  $0 = posit-param
  $1 = a
  $2 = b
  $3 = c
  $4 = d
  $# = 4를 반환한다.


3. Shift - 다수의 인자에 접근

  posit-param *

  위 예제의 경우, 와일드카드 *는 현재 디렉토리 내의 모든 인자들로 확장된다. 이 많은 것들을 어떻게 처리할 수 있을까?
  쉘은 비록 어설프긴 하지만 하나의 방법을 제공한다. shift 명령어는 실행될 때마다 각 매개변수가 "하나씩 다음으로 이동"하게끔 한다. 사실 shift를 이용하여 단 하나의 매개변수(절대 바뀌지 않는 $0도 포함)를 가져오는 것이 가능하다.

    count=1
    while [[ $# -gt 0 ]]; do
      echo "Argument $count = $1"
      count=$((count + 1 ))
      shift
    done

  위 코드는 shift가 실행될 때마다 $2의 값은 $1로, $3의 값은 $2로 차례차례 이동한다. 그리고 $#의 값은 1씩 감소하게 된다.




4. 간단한 응용 프로그램
  shift 없이도 위치 매개변수를 사용하는 유용한 응용 프로그램을 작성할 수 있다.

      PROGNAME=$(basename $0)

      if [[ -e $1 ]]; then
          echo -e "\nFile Type:"
          file $1

          echo -3 "\nFile Status:"
          stat $1

      else
          echo "$PROGNAME: usage: $PROGNAME file" >&2
          exit 1
      fi

  위 코드는 파일 종류와 파일 상태를 확인한다. basename 프로그램은 경로명의 앞 부분을 제거하고 파일의 기본 이름만 남긴다.



5. 쉘 함수에서 위치 매개변수의 사용
인자를 전달하기 위해 쉘 스크립트에 위치 매개변수를 사용했던 것처럼 쉘 함수에 인자를 전달할 수 있다.

  즉,

  file_info () {
    echo "$para1 $para2"
  }

  file_info para1 para2

  이런 식으로 매개변수도 설정할 수 있다. 함수 내의 매개변수와 함수 밖의 매개변수는 전역 변수와 지역 변수처럼 그 넘버링이 다르다!!!
  단, $0은 공통!!


6. 위치 매개변수 전체 제어
때때로 위치 매개변수 전부를 그룹으로 관리하면 편리하다. 우리가 다른 프로그램을 감싸는 래퍼(wrapper)를 작성하기를 원한다면, 이는 그 프로그램의 실행을 간소화하는 스크립트나 쉘 함수를 만드는 것을 의미한다. 래퍼는 커맨드라인 옵션 목록을 공급하고 나서 인자 목록을 하위 레벨 프로그램에 전달한다.

쉘은 이러한 목적으로 두 가지 특수 매개변수를 제공한다.

  $*  항목 1부터 시작하여 위치 매개변수 목록으로 확장. 쌍 따옴표로 둘러싸면, 쌍 따옴표 내의 문자열 모두가 위치 매개변수로 확장되고 각각 IFS 쉘 변수의 첫 번째 문자(기본값은 스페이스)에 의해 구분된다.

  $@  항목 1부터 시작하여 위치 매개변수 목록으로 확장. 쌍 따옴표로 둘러싸면, 각 위치 매개변수는 쌍 따옴표로 구분된 단어로 확장된다.


    #!/bin/bash

    # posit-params3 : script to demonstrate $# and $@

    print_params () {
          echo "\$1 = $1"
          echo "\$2 = $2"
          echo "\$3 = $3"
          echo "\$4 = $4"

    }

    pass_params () {
          echo -e "\n" '$* :'; print_params $*
          echo -e "\n" '"$*" :'; print_params "$*"
          echo -e "\n" '$@ :'; print_params $@
          echo -e "\n" '"$@" :'; print_params "$@"
    }

    pass_params "word" "words with spaces"


    여기서 얻을 수 있는 교훈은, 쉘이 위치 매개 변수 목록을 얻을 수 있는 4가지 방식을 제공함에도 불구하고 "$@"는 각각의 위치 매개변수 그대로를 유지하기 때문에 가장 많이 사용되고 유용하다.

** 이해 안되어서 넘어감!
** 이해 안되어서 넘어감!
** MARK!


7. 완전한 응용 프로그램

  PART4 폴더의 exercise 확인!

  위치 매개변수의 추가로 꽤 기능적인 스크립트를 작성할 수 있다. 예를 들어 반복 작업에서 위치 매개변수는 사용자의 .bashrc 파일에 놓을 수 있는 아주 유용한 쉘 함수를 작성 가능케 한다.
