드디어 마지막 장이다. 지금까지 광범위하게 살펴보긴 했지만, 우리가 다루지 못한 bash의 기능들이 여전히 많이 존재한다. 대부분 잘 알려져 있지 않고 주로 bash에 통합되어 유용하게 사용된다.

1. 그룹 명령과 서브쉘
bash는 명령어들을 그룹화하여 함께 사용할 수 있도록 허용하는 두 가지 방법이 있다.
'그룹 명령'을 사용하든지 '서브쉘'을 사용하는 것이다.

  1) 그룹 명령

  { command1; command2; [ command3; ...] }

  2) 서브쉘

  ( command1; command2; [ command3; ...] )

두 방식의 차이는 그룹 명령은 중괄호를, 서브쉘은 괄호를 사용한다는 점이다. bash가 그룹 명령어를 처리하는 방식 때문에, 중괄호는 반드시 스페이스로 명령어와 구분되어야 하고, 마지막 명령어는 중괄호가 닫히기 전에 세미콜론이나 개행으로 끝나야 한다는 것을 명심해야 한다.


2. 리다이렉션 수행
그룹 명령과 서브쉘은 어떤 경우에 사용할까?
둘은 중요한 차이점(잠시 후 나옴)이 있지만, 모두 리다이렉션을 조절하기 위해 사용된다.

  ls -l > output.txt
  echo "Listing of foo.txt" >> output.txt
  cat foo.txt >> output.txt

위 명령어는 세 명령의 출력을 output.txt 파일로 리다이렉션한다. 이 코드를 다음과 같이 그룹으로 만들 수 있다.

  1) 그룹 명령
  { ls -l; echo "Listing of foo.txt"; cat foo.txt; } > output.txt

  2) 서브쉘
  (ls -l; echo "Listing of foo.txt"; cat foo.txt) > output.txt

이러한 방법은 타이핑을 줄여줌과 동시에 파이프라인과 함께 할 때 더 빛을 발한다.

  { ls -l; echo "Listing of foo.txt"; cat foo.txt; } | lpr

세 명령의 결과를 합치고 lpr의 입력과 연결하여 완성된 보고서를 출력하였다.


3. 프로세스 치환
둘 다 스트림을 합치는 데 사용되긴 하지만, 중요한 차이점이 있다.
그룹 명령은 그 명령들을 현재 쉘에서 실행하지만 서브쉘은 현재 쉘의 복사본인 자식 쉘에서 수행한다는 것이다. 이는 쉘의 환경이 복사되고 새 개체가 주어진다는 것을 의미한다. 서브쉘을 종료하면, 복사된 환경은 사라진다. 따라서 서브쉘의 환경(변수 할당 포함)에 발생한 모든 변경된 부분들도 사라지게 된다. 결론적으로 대부분의 경우 그룹 명령이 더 선호되며, 처리 속도도 훨씬 빠르고 메모리 사용량도 적다.

  echo "foo" | read
  echo $REPLY

위에서는 read 명령이 서브쉘에서 실행되기 때문에 REPLY는 항상 비어있다.
왜냐하면 파이프라인의 명령들은 '항상 서브쉘에서 실행'되기 때문이다. 변수를 할당하는 모든 명령은 이 문제에 직면할 것이다. 다행히, 쉘은 "프로세스 치환"이라는 확장을 제공한다.

  1) 표준 출력을 생성하는 프로세스인 경우
  <(list)

  2) 표준 입력을 가져오는 프로세스의 경우
  >(list)

여기서 List는 명령어들의 목록을 나타낸다.

  read < <(echo "foo")
  echo $REPLY

  echo <(echo "foo")를 살펴보면, 서브쉘의 출력이 /dev/fd/63이라는 파일에 의해 제공된다는 것을 알 수 있다.



    while read attr links owner group size data time filename; do

      cat <<- EOF
        Filename: $filename
        ...
        ...
      EOF

    done < <(ls -l | tail -n +2)

여기서 tail -n +2는 위에서 2번째줄부터 출력한다는 뜻




4. 트랩(Traps)
우리는 10장에서 프로그램이 시그널에 어떻게 반응하는지 보았다. 작은 스크립트는 이 기능이 필요하지 않지만, 좀 더 크고 복잡한 스크립트들은 시그널 처리 루틴으로 얻을 수 있는 혜택이 있다.

큰 스크립트를 설계할 때, 사용자가 스크립트 실행 중 로그아웃하거나 시스템을 종료하는 상황을 고려해야 한다. 예를 들어, 실행 중에 임시 파일을 만드는 스크립트를 만든다고 치면, 좋은 설계 방법은 스크립트가 작업을 마칠 때 그 파일을 삭제하는 것이다.

bash는 이를 위해 트랩(trap)이라는 기법을 제공한다. 빌트인 명령으로 구현되어 있다.

    trap argument signal [signal...]

argument는 읽어 들여 명령어로 처리될 문자열이고, signal은 해석한 명령어를 작동시킬 시그널이다. 간단한 예제를 살펴보자.

    #!/bin/bash

    # trap-demo : simple signal handling demo

    trap "echo 'I am ignoring you.'" SIGINT SIGTERM

    for i in {1..5}; do
      echo "Iteration $i of 5"
      sleep 5
    done

이 스크립트는 실행 중 SIGINT 또는 SIGTERM 시그널을 받으면 echo 명령을 실행하는 트랩을 정의한다. 사용자가 CTRL+C를 누르면 echo가 동작한다.

실제로는 명령어로 쉘 함수를 지정하는데, 다음 예제를 살펴보자.

    #!/bin/bash

    # trap-demo2 : simple signal handling demo

    exit_on_signal_SIGINT () {
      echo "Script interrupted." 2>&1
      exit 0
    }

    exit_on_signal_SIGTERM () {
      echo "Script terminated." 2>&1
      exit 0
    }

    trap exit_on_signal_SIGINT SIGINT
    trap exit_on_signal_SIGTERM SIGTERM

    for i in {1..5}; do
      echo "Iteration $i of 5"
      sleep 5
    done


** 임시 파일
스크립트에 시그널 핸들러가 포함된 이유는 임시 파일들을 제거하기 위해서다. 전통적으로 유닉스형 시스템은 임시 파일을 /tmp 디렉토리에 생성한다. 하지만 그 디렉토리는 공유되기 때문에 보안상의 문제가 있다. 결국 임시 파일에 예측할 수 없는 파일명을 붙이는 것이 중요한데, 이는 temp race attack이라는 공격을 피할 수 있는 방법이다.

    tempfile=/tmp/$(basename $0).$$.$RANDOM

이는 프로그램 이름, 프로세스 ID, 난수 순서로 구성된 파일명을 생성한다! 하지만 RANDOM은 1에서 32767 사이의 값만을 반환하기 때문에 매우 큰 범위는 아니므로 주의.

더 알고 싶으면 498p 참고



5. 비동기 실행
비동기 방식은 동시에 하나 이상의 작업을 수행할때 적합하다. 스크립트들 역시 멀티태스킹하에서 동작하게 만들 수 있다.

부모 또는 자식이 상호 의존적이고, 하나의 스크립트가 해당 작업을 완료하기 전에 다른 스크립트의 실행이 완료될 때를 기다려야만 한다면 어떻게 해야 할까?

bash는 이와 같은 비동기 실행을 도와주는 빌트인 명령어를 가지고 있다. wait 명령어는 명시된 프로세스가 완료될 때까지 부모 스크립트의 실행을 멈추게 한다.

  1) wait
  이를 시연하기 위해서는 스크립트가 두 개 필요한데, 다음을 보자.

    #!/bin/bash
    #async-parent : Asynchronous execution demo (parent)
    echo "Parent: starting..."
    echo "Parent: launching child script..."
    ./async-child &
    pid=$!
    echo "Parent: child (PID=$pid) launched"

    echo "Parent: continuing..."
    sleep 2

    echo "Parent: pausing to wait for child to finish..."
    wait $pid

    echo "Parent: child is finished. Continuing..."
    echo "Parent: parent is done. Exiting."


    #!/bin/bash

    #async-child : Asynchronous execution demo (child)

    echo "Child: child is running..."
    sleep 5
    echo "Child: child is done. Exiting."

  이 예제에서 부모 스크립트 내에서 자식이 실행되고, 백그라운드로 진입하게 된다.
  자식의 ID는 $!를 통해 pid변수에 할당되어 기록된다. 이 쉘 매개변수는 항상 백그라운드에 진입한 마지막 작업의 프로세스 ID를 갖게된다!
  wait명령어는 부모 스크립트가 자신의 종료 시점에서 자식이 종료될 때까지 기다린다.




6. 네임드 파이프(Named Pipes)
대부분의 유닉스형 시스템은 네임드 파이프라는 특수한 종류의 파일을 생성할 수 있다.
네임드 파이프는 두 프로세스를 연결하기 위해 사용되고 다른 종류의 파일들처럼 파일로써 사용될 수 있다.

클라이언트/서버라 부르는 일반적인 프로그래밍 아키텍쳐가 있다. 이는 네트워크 연결과 같은 프로세스 간 통신이나 네임드 파이프와 같은 통신 수단으로 활용할 수 있다.

클라이언트/서버 시스템의 가장 널리 사용되는 방식은 웹 브라우저와 웹 서버이다. 브라우저는 클라이언트로서 동작하며 서버에 요청을 한다.

  1) 사용
  네임드 파이프는 파일처럼 동작하지만 실제로는 선입선출(FIFO) 버퍼 형태다. 일반적인 파이프들과 함께 데이터는 한 곳으로 들어가 다른 곳으로 나오게 된다. 다음과 같이 설정한다.

    process1 > named_pipe

    process2 < named_pipe

  이것은 다음과 같이 동작한다

    process1 | process2


  2) 네임드 파이프 설정
  우선 네임드 파이프를 생성해야 하는데, mkfifo 명령어를 이용한다.

    mkfifo pipe1
    ls -l pipe1

  그리고 두 개의 터미널 윈도우 (혹은 두 개의 가상 콘솔)을 이용해 실험해보자.

    ls -l > pipe1

  엔터를 누르면 명령어는 멈춘 것처럼 보이지만, 그 이유는 파이프 말미에 아직 아무런 데이터도 받지 못했기 때문이다. 이런 현상을 파이프가 '블록'되었다고 한다.
  이 상태는 우리가 프로세스를 끝에 붙이는 것으로 해결된다.

    cat < pipe1     (두 번째 터미널)

  성공적으로 명령어가 전달되고, 블록이 되지 않는다!



--- 마무리

자, 이제 모든 여정을 마쳤다.
우리가 커맨드라인에 대해 광범위하게 다루긴 했지만 겨우 수박 겉핥기일 뿐이다.
여전히 우리가 찾아서 즐겨야 할 수천여 개의 커맨드라인 프로그램이 있다.
어서 /usr/bin을 샅샅이 파헤쳐보자!
고생했다!!

(2017. 07.01 ~ 2017. 08.28 리눅스 정주행 끝!)
