지금까지 우리가 작성한 스크립트는 '대화식 모드'가 빠져있다.

1. read - 표준 입력에서 값 읽어오기
read는 쉘의 내장 명령어로 표준 입력으로 들어온 내용을 한 줄씩 읽어온다.
키보드 입력을 읽어올 때나 리다이렉션을 적용하여 파일의 데이터를 읽어올 때 사용한다.

  read [-options] [variable...]

  -options
  -a array    입력값을 array에 할당.
  -d delimiter delimiter 문자열에서 개행 문자가 아닌 첫 문자를 입력의 끝으로 가리킴
  -e          Readline을 이용하여 입력 관리
  -n num      입력된 행 전체 대신 num수의 문자만 읽어옴
  -p prompt   prompt 문자열을 이용하여 입력을 위한 프롬프트를 띄운다
  -r          Raw모드. 백슬래시 기호를 이스케이프로 해석하지 않음
  -s          묶음 모드. 문자를 입력할 때마다 해당 문자를 다시 표시하지 않음.
              비밀번호나 중요한 정보를 입력할 때 유용
  -t seconds  타임아웃. 일정 시간 후에 입력을 종료한다. 입력 시간이 초과되면 0이 아닌 종료 상태 값을 반환한다
  -u fd       표준 입력 대신 fd 파일 디스크립터를 입력으로 사용한다.


  1)
  앞서 배운 read-integer 프로그램에서,
    echo -n "Please enter an integer -> "
    read int
  를 통해 입력을 받을 수 있다. -n 옵션은 출력 시 개행하지 않게 한다.

  2)
    read var1 var2 var3 var4 var5를 통해 여러 변수 입력도 가능하다.
      -적게 값을 입력 받으면 나머지 변수들은 빈 값으로 채우고,
      -더 많이 입력을 받으면 마지막 변수가 나머지 모든 값을 할당 받는다

  3) read 명령어 다음에 변수가 없다면, 쉘 변수인 REPLY에 모든 입력이 할당된다.



2. IFS로 입력 필드 구분하기
  일반적으로 쉘은 read에 제공된 입력 내용을 하나 이상의 스페이스로 분리된 단어로 구분한다. 이러한 방식은 IFS(입력 필드 구분자)라고 하는 쉘 변수에 의해 설정된다. IFS의 기본 값은 스페이스, 탭, 개행 문자를 포함하고 있고 각각 별도의 항목으로 구분된다.

  이를 변경할 수 있는데, 예를 들어 /etc/passwd파일은 콜론 기호로 구분한다. 따라서 IFS 값을 콜론으로 변경하여 우리는 read를 통해 passwd 파일 내용을 입력 받을 수 있다.

    read -p "Enter a username > " user_name
    file_info=$(grep "^$user_name:" $FILE)

    if [ -n "$file_info" ]; then
      IFS=":" read user uid gid name home shell <<< "$file_info"

    혹은
      OLD_IFS="$IFS"
      IFS=":"
      작업
      IFS="$OLD_IFS"를 통해 다시 변수를 원상복귀 시킬 수 있다.
    <<< 연산자는 here 문자열이다. 여기서 이렇게 사용한 이유는, read 명령어는 파이프라인과 함께 사용할 수 없기 때문이다.
    즉, echo "$file_info" | IFS=":" read user pw .. 이게 불가능하다!


  3. 입력 값 검증 & 메뉴 만들기
    이론적 부분보다는 연습해야 할 부분!
    
