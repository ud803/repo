1. 간단한 포맷 툴
  nl      : 줄 번호 매기기
            nl 프로그램은 단순히 줄 번호를 매기는 간단한 작업을 하는 꽤 신기한 툴이다. cat -n처럼 아주 간단하다.
            nl도 cat처럼 커맨드라인 인자나 표준 입력으로 복수의 파일명도 허용한다. 좀 더 복잡한 방식의 번호를 붙이기 위해 마크업의 기본 형태를 지원한다.

            nl은 번호를 붙일 때 논리적 페이지(logical pages)라는 개념을 제공한다. 이는 nl이 번호를 붙일 때 순서를 다시 처음부터 시작할 수 있도록 허용한다. 논리적 페이지는 추가적으로 머리말, 본문, 꼬리말로 세분화된다. nl에 복수의 파일이 주어진다면 단일 텍스트 스트림으로 처리된다.
              \:\:\:  논리적 페이지의 머리말 시작
              \:\:    논리적 페이지의 본문 시작
              \:      논리적 페이지의 꼬리말 시작

              -b style  본문의 줄 번호에 스타일을 적용
                  a 모든 줄에 번호를 붙임
                  t 공백 줄이 아닌 경우에만 번호를 붙임. 기본값
                  n 번호를 붙이지 않음
                  pregexp 정규 표현식과 일치하는 줄에만 번호를 붙임
              -f style  꼬리말의 줄 번호에 스타일 적용. 기본값은 n
              -h style  머리말의 줄 번호에 스타일을 적용. 기본값은 n
              -i number 페이지 번호의 증가량을 number로 설정. 기본값은 1
              -n format 줄 번호 포맷을 설정
                  ln 0 없이 왼쪽 정렬
                  rn 0 없이 오른쪽 정렬. 기본값
                  rz 0 포함 오른쪽 정렬
              -p 각 논리 페이지의 시작 부분에서 페이지 번호를 재설정 못하게 함
              -s string string을 구분자로 만들기 위해 각 줄 번호의 끝에 추가. 기본값은 탭 문자
              -v number 각 논리 페이지의 첫째 줄 번호를 number로 설정. 기본값은 1
              -w width  width를 줄 번호 필드의 너비로 설정. 기본값은 6

              sort -k 1,1 -k 2n distros.txt | sed -f distros-nl.sed | nl


  fold    : 각 줄을 지정된 길이로 나누기
            폴딩(Folding)은 텍스트 행을 지정된 길이로 나누는 절차다. 하나 이상의 텍스트 파일이나 표준 입력을 허용한다.

            echo "String" | fold -w 12
              -w 너비 설정, 기본값은 80
              -s 단어가 잘리기 전 마지막 공백에서 자름


  fmt     : 간단한 텍스트 포매터
            fmt -w 50 filename
            fmt -cw 50 filename

            -c    : crown margin 모드로 동작. 문단 첫 두 줄의 들여쓰기를 유지하고, 두 번째 줄의 들여쓰기에 맞춘다
            -p string : string을 접두어로 줄을 시작하게 만든다.
              예를 들어,
                fmt -w 50 -p '# ' fmt-code.txt 는 #으로 시작하는 부분을 합침

            -s    : 분할 모드, 열 너비에 딱 맞게 분할된 것이다

  pr      : 인쇄용 텍스트 포맷 지정
            pr프로그램은 텍스트에 페이지 매기기 위해 사용된다.

            pr -l 15 -w 65 distros.txt

            65열 15행을 가진 "페이지"를 정의하기 위해 -l 옵션(페이지 길이)와 -w 옵션(페이지 너비)를 사용한다.


  printf  : 자료의 출력 및 포맷 지정
            다른 명령어들과 달리 printf 명령어는 파이프라인에 사용되지도 않고(표준 입력을 허용하지 않는), 커맨드라인의 흔한 프로그램에서도 직접적으로 발견되지 않는다(대부분 스크립트에서 사용된다). 그럼 왜 중요할까? 광범위하게 사용되기 때문이다.

            printf(포맷된 출력)은 원래 C 프로그래밍 언어를 위해 개발되었다. 그리고 쉘을 포함하여 많은 프로그래밍 언어에서 구현되었다. 실제로 bash에는 printf가 내장되어 있다.

            printf " format" arguments

            printf "I formatted the string: %s\n" foo
            포맷 문자열은 일반 텍스트, 이스케이프 문자열, 변환 지정 %기호로 구성된다.

          %[flags][width][.precision]conversion_specification

              -flags
                다섯 가지 플래그가 존재
                  # 출력을 위해 대체 포맷을 사용
                  0 출력 결가에 0 추가
                  - 출력 결과 왼쪽 정렬
                    (스페이스) 양수 앞에 공백 생성
                  + 양수에 부호를 붙임

              -width
                최소 필드 너비 지정
              -.precision
                부동 소수점 수의 뒷자리를 출력하기 위해 정밀도 자릿수 지정, 문자 변환일 경우 출력될 문자 수 지정

              -지정자 목록(conversion specification)
                d 부호를 가진 10진수 형태
                f 부동 소수점 형태
                o 8진수 형태
                s 문자열 형태
                x 소문자 a-f를 사용해 16진수 형태
                X x와 동일하지만, 대문자를 사용
                % 상수 기호 %를 출력(즉, "%%"를 명시)

              "%d"    : 정수 형태로 나타내기
              "%#x"   : 대체 포맷 플래그를 사용하여 16진수 형태로 나타내기
              "%05d"  : 0으로 시작하는 정수 형태로 나타내고 최소 필드 너비는 5자
              "%010.5f":최소 필드 너비가 10이고 소수점은 5자리까지




2. 문서 포맷 시스템
지금까지 간단한 텍스트 포맷 툴을 살펴보았다. 이들은 작고 간단한 작업에는 좋지만, 좀 더 큰 작업에는 어렵다. 유닉스가 기술적이고 체계적인 사용자들 사이에서 인기 있는 운영체제가 된 이유 중 하나는 다양한 형태의 문서, 특히 체계적이고 학습적인 출판물을 만들 수 있는 툴들을 제공하기 때문이다.

  roff 계열과 TEX
  roff = run off (뽑다, 출력하다)

  groff   : 문서 포맷 시스템

  zcat /usr/share/man/man1/ls.1.gz | groff -mandoc > ~/exercise/foo.ps

  ps2pdf foo.ps foo2.pdf
  ls /usr/bin/*[[:alpha:]]2[[:alpha:]]

  sort -k 1,1 -k 2n distros.txt | sed -f distros-tbl.sed | groff -t -T ascii
  *위 명령어 작동하지 않음. sed의 문제였는데 나중에 해볼 것
  
