1. 파일 압축하기

데이터 압축은 불필요하거나 중복된 데이터를 제거하는 과정을 말한다. 한번 상상을 해보자. 우리는 100*100 픽셀의 온통 검은색인 사진 한 장을 가지고 있다. 자료 저장 측면에서(픽셀당 24비트라고 가정), 이 이미지가 차지하는 공간은 30,000바이트가 된다. (100*100*3). 만약 우리가 현명하다면, 30000개의 검은색 픽셀 블록을 가지고 있다는 사실을 간단히 표현하는 것만으로 데이터를 인코딩할 수 있을 것이다. 즉, 30000개의 0이 포함된 데이터 블록을 모두 저장하는 대신 30000이라는 숫자와 데이터를 대표하는 0만을 가지고 데이터를 압축해볼 수 있다. 이러한 데이터 압축 방법을 run-length encoding(연속된 데이터 길이를 부호화) 라고 한다. 가장 기본적인 방법 중 하나다.

압축 알고리즘은 두 가지 카테고리로 구분되는데 바로 무손실과 손실 방식이다. 무손실 압축 알고리즘은 원본 그대로를 유지하는 방식이다. 즉 압축 파일이 복구되면 그 파일은 압축되기 이전의 원본과 정확히 똑같다는 것이다. 반면, 손실 압축 알고리즘은 압축이 수행될 때 데이터 일부를 삭제하는데 그 이유는 압축률을 더 높이기 위해서다. 데이터 손실이 발생한 파일이 복구되면 원본과는 똑같지 않지만 거의 비슷한 수준이다. 대표적인 손실 압축 알고리즘이 바로 JPEG(이미지)와 MP3(음악 파일)이다.

  gzip  : 파일 압축 및 압축 해제하기 .gz
          gzip은 하나 이상의 파일을 압축할 때 사용된다. 이 프로그램을 실행하면 원본 파일은 압축 버전의 파일로 대체된다. 이와 함께 사용되는 gunzip 프로그램은 압축 파일을 압축되기 이전의 원본 상태로 복원시켜준다.

          -c    : 표준 출력에 결과를 쓰고, 원본 파일을 유지함 (--stdout / -to-stdout)
          -d    : 압축 해제. gzip과 같이 쓰면 gunzip과 같은 동작이다
          -f    : 압축 파일이 이미 존재해도 압축을 실행 (--force)
          -h    : 도움말
          -l    : 각각의 압축 파일별로 압축 정보를 표시
          -r    : 커맨드라인의 인자가 디렉토리인 경우, 디렉토리에 포함된 파일까지 압축
          -t    : 압축 파일의 무결성 검사
          -v    : 압축되는 과정 자세히 표시
          -number: 압축 정도를 설정 (1-가장 빠르지만 압축률 최소 -> 9 가장 느리지만 압축률 최대, 기본값은 6)
          zcat / zless : 압축 내용 보기


  bzip2 : 블록 단위의 파일 압축 프로그램 (속도는 느리지만 고성능 압축 프로그램) .bz2
          대부분을 옵션을 공유하나.
          bunzip2 / bzcat
          bzip2recover : 손상 .bz2 파일 복구

  가끔씩 사람들이 gzip picture.jpg와 마찬가지로 압축 파일을 한 번 더 압축하게 되는데, 이는 시간과 공간 낭비이다. 그 이유는 모든 압축 기법들은 압축을 설명하는 오버헤드를 포함하기 때문임.



2. 파일 보관하기 (아카이빙 )

파일 보관(아카이빙)이란 많은 파일들을 모아서 하나의 큰 파일로 묶는 과정을 말한다. 아카이빙은 시스템 백업의 일환으로 종종 수행되는 작업이다. 또한 일종의 장기 보관용 저장 장치에 오래된 데이터를 옮길 때 필요한 작업이다.

  tar   : 테이프 아카이빙 유틸리티
          1)
          유닉스 세상에서 tar은 파일 보관을 위한 전통적인 툴이다. tape archive의 준말로 백업 테이프를 만들기 위한 도구에서 유래되었다.
          .tar나 .tgz를 확장자로 가진 파일을 종종 보게 되는데, 이것은 각각 "일반적인" tar 아카이브와 gzip으로 압축된 아카이브라는 것을 뜻한다.
          tar아카이브는 여러 파일로 구성된 그룹이거나, 하나 이상의 디렉토리 트리 또는 이 두 가지가 혼합된 형태일 수 있다.

          tar mode[options] pathname...

          pathname을 절대경로명으로 입력하면, 어디서 해체되든 그 절대경로를 반복 생성하여 해체된다.
          항상 모드(c, t)가 먼저 나오고, 그 뒤 옵션이 나온다.

          c : 파일과(또는) 디렉토리의 목록에서 아카이브 생성하기
          x : 아카이브 해제하기
          r : 아카이브 끝에 지정된 경로명 덧붙이기
          t : 아카이브 내용 보기

          tar cf playground.tar playground   : playground로부터 playground.tar 생성
          tar tvf playground.tar              : playground.tar 내용 보기
          tar xf ../playground2.tar --wildcards 'home/uidam/exercise/playground/dir-*/file-A' : 와일드카드!

          2)
          find playground -name 'file-A' -exec tar rf playground.tar '{}' '+'   : 찾아서 추가하기
          tar를 find와 함께 사용하는 것은 시스템 트리에 대한 증분 백업을 만드는 데 매우 좋은 방법이다. 특정 시간 이후에 변경되는 파일을 find로 찾아서 그 새로운 파일들만 아카이브 뒤에 붙이면 되기 때문!! 여기서 타임스탬프 파일은 항상 갱신된다고 가정한다.

          3)
          tar는 또한 표준 입출력에도 활용할 수 있다.
          find playground -name 'file-A' | tar cf - --files-from=- | gzip > playground.tgz
            1. find 명령어로 해당하는 파일들을 찾는다
            2. -는 표준 입출력을 의미한다. 즉, files-from(-T)에서 표준 입력(find의 결과)으로부터의 결과물을 받아들여서 tar로 만들고, 그 출력 결과를 파일이 아닌 표준 출력(-)으로 내보낸다.
            3.표준 출력을 gzip이 압축한다

          최신 버전에서는 z와 j 옵션이 각각 gzip과 bzip2를 지원한다.

          find playground -name 'file-A' | tar cfz(j) playground.tgz -T -


          4)
          ssh remote-sys 'tar cf - Documents' | tar xf -
          원격 시스템에서 Documents를 tar 형식으로 표준 출력으로 내보낸 뒤, 로컬 시스템에서 그 출력을 해제한다.
          즉, Documents 파일이 전송된 것


3. 파일을 묶고 압축하기
  리눅스에서는 gzip이 지배적인 압축 프로그램이고 그 다음 bzip2를 많이 사용한다. 리눅스 사용자는 zip 프로그램으로 파일을 압축하는 대신 윈도우 시스템과 파일을 교환할 때 사용한다.

  zip(unzip)   : 파일을 묶고 압축하기

  zip options zipfile file...
  -r : 폴더까지

  zip의 중요한 점은, tar와는 반대로 기존 아카이브 파일이 지정되면 파일 자체가 교체되는 것이 아니라 업데이트된다는 점이다. 즉, 기존의 아카이브는 유지되면서 새로운 파일은 추가되고 중복된 파일은 교체된다.

  unzip -l playground.zip playground/dir-087/file-Z
  unzip playground.zip playground/dir-087/file-Z

  -l 옵션은 아카이브의 내용만 표시한다.
  선택적으로 압축해제 할 수 있다.

4. 파일 및 디렉토리 동기화
  유닉스 세계에는 동기화 작업에 선호하는 툴로 rsync라는 것이 있다. 이 프로그램은 rsync remote-update protocol을 이용하여 로컬과 원격 디렉토리 모두 동기화한다. 이 프로토콜은 rsync 프로그램이 빠르게 두 디렉토리 간의 차이를 감지하여 동기화할 내용을 최소한으로 유지할 수 있도록 한다.

  rsync options source1 source2 .. destination

  source와 destination에는 다음 중 하나가 올 수 있다.
  -로컬 파일이나 디렉토리
  -원격 파일이나 디렉토리, [user@]host:path 형식
  -rsync://[user@]host[:port]/path 형식의 URI로 지정된 원격 rsync 서버
  source나 destination 둘 중 하나는 반드시 로컬 파일이어야 한다. 원격지 간의 복사는 지원되지 않는다.

  rsync -av playground foo   playground 내용을 foo에 미러링
  -a 옵션 (아카이브 생성, 실행 반복 및 파일 속성 유지)
  -v 옵션 (자세한 출력 방식)

  1) 백업 드라이브
  mkdir /media/BigDisk/Backup
  sudo rsync -av --delete /etc /home/ /sr/local /media/BigDisk/Backup
  alias backup='sudo ~'
  백업 폴더를 만들어주고, 시스템에서 가장 중요한 파일들을 매번 저장한다.
  --delete는 기존 시스템에는 더 이상 존재하지 않지만 백업 장치에 남아있는 파일을 삭제한다.

  2) 네트워크상에서 rsync 실행하기
    1. rsync 프로그램이 설치되어 있고 ssh와 같은 원격 쉘 프로그램이 동작하고 있는 다른 시스템으로 복사하기.
    sudo rsync -av --delete --rsh=ssh /etc /home /usr/local remote-sys:/backup
    --rsh=ssh : 원격 쉘로서 ssh를 사용하라
    remote-sys:/backup 호스트와 패스 지정

    2. rsync server를 이용하여 네트워크상에서 동기화
    mkdir fedora-devel
    rsync -av --delete rsync://rsync.gtlib.gatech.edu/fedoralinux-core/development/i386/os fedora-devel
    rsync:// 프로토콜과 호스트명(rsync.gtlib.gatech.edu), 저장소 경로명으로 구성된 원격의 rsync서버의 URI이다.
