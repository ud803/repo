1. 현대 운영체제들은 한 프로그램에서 다른 프로그램으로 빠르게 이동함으로써 하나 이상의 작업이 실행되는 듯한 환상을 심어주는 멀티태스킹 방식이다. 리눅스 커널은 프로세스를 통해 이를 관리한다. 프로세스란 리눅스가 CPU를 사용하기 위해 차례를 기다리는 각 프로그램들을 구조화한 것이다.

  ps      : 현재 프로세스의 상태를 알려준다
            TTY는 teletype의 약자로 프로세스용 제어 터미널을 나타낸다. ?는 없다는 것.
            TIME 필드는 프로세스의 CPU 사용 시간을 나타낸다.


            ps x    : x 옵션을 사용하면 제어되는 터미널에 상관없이 모든 프로세스를 보여준다.
            ps aux  : 더 자세히
              USER : 사용자 아이디
              %CPU : CPU 사용량
              %MEM : 메모리 사용량
              VSZ  : 가상 메모리 크기
              RSS  : 사용 메모리 크기, 프로세스가 사용중인 물리적 메모리(RAM) 양
              START: 프로세스가 시작된 시간

            1) STAT (state)
              R : 실행 상태
              S : 수면 상태. 키 입력이나 네트워크 패킷과 같은 이벤트를 기다림
              D : 인터럽트 불가능한 수면 상태. I/O(입출력)을 기다리는 중
              T : 종료 상태. 종료 요청을 받았거나 종료된 상태
              Z : 현존하지 않거나 "좀비 프로세스". 부모 프로세스에 의해 정리되지 않은 종료된 자식 프로세스다
              < : 높은 우선순위 프로세스. 프로세스의 이러한 속성을 niceness라고 하는데, 높은 우선순위의 프로세스는 다른 프로세스보다 더 많은 CPU 시간을 갖기 때문에 nice하지 않다고 말한다.
              N : 낮은 우선순위 프로세스. 낮은 우선순위 프로세스(nice 프로세스)는 높은 프로세스가 사용한 뒤 시간을 얻을 수 있다.

  top     : 프로세스를 표시한다
            시스템의 활동을 좀 더 동적으로 보기 위해서는 top 명령어를 사용한다.
            "최상위" 프로세스들을 보기 위해 top이라고 쓴다. 맨 위에 시스템 요약과 그 아래에 CPU 활동순으로 표시된다.

            top : 이 프로그램의 이름
            14:59:20  : 현재 시각
            up 6:30   : 마지막 부팅 후 시간
            load average : 평균 부하 시간, 각각 60초, 5분, 15분
            0.7%us    : 커널 바깥의 사용자 프로세스 차지량
            1.0%sy    : 시스템(커널) 프로세스 차지량
            0.0%ni    : nice(우선순위 낮은) 프로세스 차지량
            98.3%id   : 유휴 상태
            0.0%wa    : I/O를 대기 중

  jobs    : 실행 작업을 나열한다
  bg      : 프로세스를 백그라운드 상태로 전환한다
            xlogo & : 백그라운드에서 xlogo 실행

  fg      : 프로세스를 포어그라운드 상태로 전환한다
            fg %1   : 1번 작업을 포어그라운드로 전환
            ctrl + z: 포어그라운드 프로세스를 일시 정지 시킨다

  kill    : 프로세스에 시그널을 보낸다
            kill [-signal] PID ...
            kill -l  전체 명령어

            프로세스를 종료하기 위해 사용된다. 이는 비정상적으로 동작하거나 그렇지 않으면 종료를 거부하는 프로그램의 실행이 끝나게 해준다.

            엄밀히 말하자면 kill 명령어는 시그널을 보낸다는 표현이 더 적절하다. 시그널은 운영체제가 프로그램과 통신하기 위한 방법 중 하나다. ctrl-C의 INT(인터럽트) 시그널을 보내고, ctrl-Z는 TSTP(터미널 정지) 시그널을 보낸다.

              번호  이름    의미
              1    HUP    hang up. 종료 시킨다
              2    INT    프로그램을 종료. ctrl-c와 동일
              9    KILL   커널이 즉시 프로세스 종료. 진행중인 작업 저장 불가
              15   TERM   kill의 기본 신호. 종료 시킨다
              18   CONT   continue. STOP 시그널로 정지된 프로세스를 복원
              19   STOP   Stop. 프로세스를 정지시킴. 해당 프로세스에 직접 보내지 않는다

              3    QUIT   Quit
              11   SEGV   Segmentation violation. 허용하지 않은 영역에 쓰기를 시도
              20   TSTP   Terminal stop. ctrl-z와 동일. stop과 달리 프로그램에게 전송된다. 프로그램은 이를 무시하도록 지정되어 있을 수도 있다.
              28  WINCH   window change. 새로운 윈도우 크기에 맞게 다시 그려진다.
  killall : 프로세스명으로 프로세스를 종료시킨다
            killall [-u user] [-signal] name ...

  shutdown: 시스템을 종료하거나 재시작한다
  pstree  : 부모/자식 트리를 보여준다
  vmstat  : 자원 사용 현황을 보여줌
  xload   : 시스템 부하를 그래프로 보여줌
  tload   : 터미널에서 그래프 보여줌

2. 시스템이 구동될 때, 커널은 몇몇 프로세스를 초기화하고 init이라는 프로그램을 실행한다. init은 차례차례 모든 시스템 서비스를 시작하기 위해 init 스크립트라고 불리는 쉘 스크립트(/etc에 위치)를 실행한다. 이 많은 서비스들은 데몬 프로그램으로 구현되어 있는데, 데몬 프로그램이란 아무런 사용자 인터페이스 없이 백그라운드에서 실행된다. 그래서 로그인하지 않은 상태에서도 시스템은 최소한의 필요 작업들을 수행한다.

프로그램은 또 다른 프로그램을 실행할 수 있는데, 이를 부모 프로세스가 자식 프로세스를 생성한다고 표현한다. 각 프로세스는 프로세스ID(PID)를 할당 받는데, 이는 오름차순으로 할당되며 PID 1번은 항상 init이 된다.
