1. 명령어를 입력하고 엔터키를 누르면 bash는 그 명령어를 수행하기 전에 텍스트에 몇 가지 프로세스를 진행한다. 예를 들면 * 기호처럼 쉘에 여러 의미를 주는 경우, 단순히 연속된 문자열로 처리되는 것과 같은 몇 가지 경우를 살펴보았는데, 이러한 프로세스를 확장이라고 한다.

echo는 표준 출력상에 해당 텍스트 인자를 표현하는 명령어이다.

  1) 경로명 확장 : 와일드 카드로 동작하는 방식
      ls
      echo D*
      echo *s
      echo [[:upper:]]*
      echo /usr/*/share

      숨김 파일 : ls -d .[!.]?*    : . ..는 제외 함

  2) 틸드 (~) 확장 : 홈 디렉토리
  3) 산술 확장
      echo $((2+2))

      + - * / % **

      echo Five divided by two equals $((5/2))

  4) 중괄호 확장 (반복 연산)
      echo Front-{A,B,C}-Back
        >> Front-A-Back Front-B-Back Front-C-Back
      echo {Z..A}
        >> Z Y ... A
      echo a{A{1,2},B{3,4}}b
        >> aA1b aA2b aB3b aB4b
      mkdir {2009..2011}-0{1..9} {2009..2011}-{10..12}

  5) 매개변수 확장 : 커맨드라인보다 쉘 스크립트에서 더 유용한 기능
      echo $user
        >> me

  6) 명령어 치환 : 아주 중요한 녀석! 자주 쓰인다!!
      echo $(ls)
      ls -l $(which cp)
      ls -l 'which cp'

2. 따옴표 활용
  쉘은 불필요한 공백을 삭제하여 단어 분할을 하고, 원치 않는 확장을 하게 된다. 이를 위해 따옴표 기호를 활용할 수 있다.

  1) 쌍 따옴표 기호
  텍스트를 묶으면 모든 특수한 기호들의 의미가 사라진다.
  단, 매개변수 확장, 산술 확장, 명령어 치환의 의미는 안사라진다!
  ls -l "two words.txt"

  echo $(cal)
  echo "$(cal)"

  2) 작은 따옴표
  모든 확장을 숨겨야 한다면 작은 따옴표를 사용한다!

  예제)
  echo text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER
    >> text /home/me/ls-output.txt a b foo 4 me
  echo "text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER"
    >> text ~/*.txt {a,b} foo 4 me
  echo 'text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER'
    >> text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER


  3) 이스케이프 문자
  가끔 하나의 문자를 인용하고 싶을 때는, 백슬래시를 추가하면 된다. 종종 이 문자는 선택적 확장을 막기 위해 쌍 따옴표 안에서 사용된다.
  파일명으로 지정할 때도 이스케이프 문자를 써준다.
  백슬래시 자체를 쓰고 싶으면 백슬래시를 두번(\\) 사용하면 된다.

    백슬래시 확장 문자열
      \a  벨(컴퓨터에서 소리 발생)
      \b  백스페이스
      \n  새 줄
      \r  캐리지 리턴
      \t  탭

      sleep 10; echo -e "Time's up\a"
